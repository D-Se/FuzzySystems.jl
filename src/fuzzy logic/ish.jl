abstract type AbstractIsh <: AbstractFloat end

for type in (:ùôÇish, :ùòøish, :ùòºish, :ùôáish, :ùôÅish)
    name = string(type)[1]
    or, and, imp, not = Symbol.(name .* ('·µó', 'À¢', '‚Å±', '‚Åø'))
    @eval begin
        struct $type <: AbstractIsh œï::Float64
            $type(œï) = new(min(1, max(0, œï)))
        end
        Base.show(io::IO, x::$type) = print(io, "‚âà" * string(x.œï))
        (|)(x::$type, y::$type)::$type = $or(x.œï, y.œï)
        (&)(x::$type, y::$type)::$type = $and(x.œï, y.œï)
        (‚üπ)(x::$type, y::$type)::$type = $imp(x.œï, y.œï)
        (!)(x::$type, y::$type)::$type = $not(x.œï, y.œï)
    end
end

# TODO: make parametric interfaces
(:ùìïish, :ùìóish, :ùì¢ùì¢ish, :ùì®ish, :ùììish, :ùìêùìêish, :ùì¢ùì¶ish, :ùììùìüish, :ùì®ùì§ish)

# Internal toggles to swap fuzzy backends for &, |, ‚üπ, ! ops.
# Using fields ensures type stability and 0 allocations in ops.
mutable struct TypeToggle Œ¥::Int end
const ùì£ = TypeToggle(1)

let
    struct store value::Union{ùôÇish, ùòøish, ùòºish, ùôáish, ùôÅish} end
    global function ish(x)
        n = ùì£.Œ¥
        x = begin
            n == 1 ? ùôÇish(x) |> store :
            n == 2 ? ùòøish(x) |> store :
            n == 3 ? ùòºish(x) |> store :
            n == 4 ? ùôáish(x) |> store :
            ùôÅish(x) |> store
        end
        return x.value
    end
end

let
    type_constants = @alias {
        1 G√∂del g√∂del
        2 Drastic drastic
        3 Product Product Algebraic algebraic
        4 ≈Åukasiewicz Lukasiewicz lukasiewicz
        5 Fodor fodor
    }

    global function setlogic!(name::Symbol)
        n = type_constants[name]
        global ùì£.Œ¥ = n
    end
end
